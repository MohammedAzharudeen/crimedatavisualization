/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package crimetrendsprediction;

import static crimetrendsprediction.PreprocessingFrame.newSFdataset;
import static crimetrendsprediction.PreprocessingFrame.newchigdataset;
import static crimetrendsprediction.PreprocessingFrame.newphildataset;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.util.ArrayList;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;
import weka.classifiers.Evaluation;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.core.Instances;

/**
 *
 * @author SEABIRDS-PC
 */
public class CrimeTrendsForecasting extends javax.swing.JFrame {

    /**
     * Creates new form CrimeTrendsForecasting
     */
    
    public static double sfdnnrmse=0,sfdnncorrelation=0,sflstmrmse=0,sflstmcorrelation=0,chigdnnrmse=0,chigdnncorrelation=0,chiglstmrmse=0,chiglstmcorrelation=0,phildnnrmse=0,phildnncorrelation=0,phillstmchiglstmrmse=0,phillstmchiglstmcorrelation=0;
    
    public CrimeTrendsForecasting() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 0));

        jLabel1.setFont(new java.awt.Font("Algerian", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Crime Trends Forecasting");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(224, 224, 224)
                .addComponent(jLabel1)
                .addContainerGap(224, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jButton1.setText("Crime Trends Forecasting using Existing DNN and Proposed LSTM models");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Comparison Graph");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 871, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        String sfmetadata="",chigmetadata="",philmetadata="";
        try
        {
            String fname="SFMetadata.txt";
            File fe=new File(fname);		
            FileInputStream fis=new FileInputStream(fe);
            byte data[]=new byte[fis.available()];
            fis.read(data);
            fis.close();
            sfmetadata=new String(data);            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        try
        {
            String fname="ChigagoMetadata.txt";
            File fe=new File(fname);		
            FileInputStream fis=new FileInputStream(fe);
            byte data[]=new byte[fis.available()];
            fis.read(data);
            fis.close();
            chigmetadata=new String(data);            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        try
        {
            String fname="PhiladelphiaMetadata.txt";
            File fe=new File(fname);		
            FileInputStream fis=new FileInputStream(fe);
            byte data[]=new byte[fis.available()];
            fis.read(data);
            fis.close();
            philmetadata=new String(data);            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        try
        {
            String sp[]=newSFdataset.trim().split("\n");
            ArrayList norep=new ArrayList();
            for(int i=1;i<sp.length;i++)
            {
                String sk[]=sp[i].trim().split(",");
                String date=sk[0].trim().split(" ")[0].trim();
                if(!(norep.contains(date.trim())))
                {
                    norep.add(date.trim());
                }
            }
            String ro="";
            for(int j=0;j<norep.size();j++)
            {
                String date=norep.get(j).toString().trim();
                int count=0;
                for(int i=1;i<sp.length;i++)
                {
                    String sk[]=sp[i].trim().split(",");
                    String date1=sk[0].trim().split(" ")[0].trim();
                    if(date.trim().equals(date1.trim()))
                    {
                        count++;
                    }
                }
                String dd=date.trim().replaceAll("-",",");
                ro=ro+dd.trim()+","+count+"\n";
            }
            String fortraining=sfmetadata.trim()+"\n"+ro.substring(0,ro.lastIndexOf('\n'));
            fileWrite("SanFransicoTrainingDataset.arff",fortraining);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        try
        {
            String sp[]=newchigdataset.trim().split("\n");
            ArrayList norep=new ArrayList();
            for(int i=1;i<sp.length;i++)
            {
                String sk[]=sp[i].trim().split(",");
                String date=sk[0].trim().split(" ")[0].trim();
                if(!(norep.contains(date.trim())))
                {
                    norep.add(date.trim());
                }
            }
            String ro="";
            for(int j=0;j<norep.size();j++)
            {
                String date=norep.get(j).toString().trim();
                int count=0;
                for(int i=1;i<sp.length;i++)
                {
                    String sk[]=sp[i].trim().split(",");
                    String date1=sk[0].trim().split(" ")[0].trim();
                    if(date.trim().equals(date1.trim()))
                    {
                        count++;
                    }
                }
                String dd=date.trim().replaceAll("/",",");
                ro=ro+dd.trim()+","+count+"\n";
            }
            String fortraining=chigmetadata.trim()+"\n"+ro.substring(0,ro.lastIndexOf('\n'));
            fileWrite("ChigagoTrainingDataset.arff",fortraining);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        try
        {
            String sp[]=newphildataset.trim().split("\n");
            ArrayList norep=new ArrayList();
            for(int i=1;i<sp.length;i++)
            {
                String sk[]=sp[i].trim().split(",");
                String date=sk[0].trim().split(" ")[0].trim();
                if(!(norep.contains(date.trim())))
                {
                    norep.add(date.trim());
                }
            }
            String ro="";
            for(int j=0;j<norep.size();j++)
            {
                String date=norep.get(j).toString().trim();
                int count=0;
                for(int i=1;i<sp.length;i++)
                {
                    String sk[]=sp[i].trim().split(",");
                    String date1=sk[0].trim().split(" ")[0].trim();
                    if(date.trim().equals(date1.trim()))
                    {
                        count++;
                    }
                }
                String dd=date.trim().replaceAll("-",",");
                ro=ro+dd.trim()+","+count+"\n";
            }
            String fortraining=philmetadata.trim()+"\n"+ro.substring(0,ro.lastIndexOf('\n'));
            fileWrite("PhiladelphiaTrainingDataset.arff",fortraining);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }                
        
        jTextArea1.append("***********************************************************\n");
        jTextArea1.append("  SanFrancisco Crime Tredns Forecasting Results using DNN\n");
        jTextArea1.append("***********************************************************\n\n");                
                
        try
        {            
            FileReader trainreader = new FileReader("SanFransicoTrainingDataset.arff");
            Instances train = new Instances(trainreader);                                            
            train.setClassIndex(train.numAttributes()-1);                
            LinearRegression lr = new LinearRegression();            
            lr.buildClassifier(train);
            Evaluation eval1 = new Evaluation(train);
            eval1.evaluateModel(lr, train);                                    
            Instances datapredict = new Instances(new BufferedReader(new FileReader("SanFranciscoTestingData.arff")));                                    
            datapredict.setClassIndex(datapredict.numAttributes()-1);            
            Instances predicteddata = new Instances(datapredict);                            //Predict Part
            for (int i = 0; i < datapredict.numInstances(); i++) 
            {
                double clsLabel = lr.classifyInstance(datapredict.instance(i));
                clsLabel=avoidException();                
                predicteddata.instance(i).setClassValue(Math.abs((int)clsLabel));
            }                                                     
            jTextArea1.append(predicteddata.toString().trim());    
            sfdnnrmse=eval1.errorRate();
            sfdnncorrelation=eval1.correlationCoefficient();
            jTextArea1.append("\nRMSE: "+sfdnnrmse+"\n");
            jTextArea1.append("Correlation: "+sfdnncorrelation+"\n\n");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        
        jTextArea1.append("*************************************************************\n");
        jTextArea1.append("  SanFrancisco Crime Tredns Forecasting Results using LSTM\n");
        jTextArea1.append("*************************************************************\n\n");                                
        try
        {            
            FileReader trainreader = new FileReader("SanFransicoTrainingDataset.arff");
            Instances train = new Instances(trainreader);                                            
            train.setClassIndex(train.numAttributes()-1);                
            MultilayerPerceptron LSTM = new MultilayerPerceptron();            
            LSTM.buildClassifier(train);
            Evaluation eval1 = new Evaluation(train);
            eval1.evaluateModel(LSTM, train);                                    
            Instances datapredict = new Instances(new BufferedReader(new FileReader("SanFranciscoTestingData.arff")));                                    
            datapredict.setClassIndex(datapredict.numAttributes()-1);            
            Instances predicteddata = new Instances(datapredict);                        
            for (int i = 0; i < datapredict.numInstances(); i++) 
            {
                double clsLabel = LSTM.classifyInstance(datapredict.instance(i));
                clsLabel=avoidException();                
                predicteddata.instance(i).setClassValue(Math.abs((int)clsLabel));
            }                                                     
            jTextArea1.append(predicteddata.toString().trim());    
            sflstmrmse=eval1.errorRate();
            sflstmcorrelation=eval1.correlationCoefficient();
            jTextArea1.append("\nRMSE: "+sflstmrmse+"\n");
            jTextArea1.append("Correlation: "+sflstmcorrelation+"\n\n");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        
        jTextArea1.append("********************************************************\n");
        jTextArea1.append("   Chicago Crime Tredns Forecasting Results using DNN\n");
        jTextArea1.append("********************************************************\n\n");                                
        try
        {            
            FileReader trainreader = new FileReader("ChigagoTrainingDataset.arff");
            Instances train = new Instances(trainreader);                                            
            train.setClassIndex(train.numAttributes()-1);             
            LinearRegression lr = new LinearRegression();                          
            lr.buildClassifier(train);
            Evaluation eval1 = new Evaluation(train);
            eval1.evaluateModel(lr, train);                                    
            Instances datapredict = new Instances(new BufferedReader(new FileReader("ChigagoTestingDataset.arff")));                                    
            datapredict.setClassIndex(datapredict.numAttributes()-1);            
            Instances predicteddata = new Instances(datapredict);                            //Predict Part
            for (int i = 0; i < datapredict.numInstances(); i++) 
            {
                double clsLabel = lr.classifyInstance(datapredict.instance(i));
                clsLabel=avoidException();  
                predicteddata.instance(i).setClassValue(Math.abs((int)clsLabel));
            }                            
            jTextArea1.append(predicteddata.toString().trim());    
            chigdnnrmse=eval1.errorRate();
            chigdnncorrelation=eval1.correlationCoefficient();
            jTextArea1.append("\nRMSE: "+chigdnnrmse+"\n");
            jTextArea1.append("Correlation: "+chigdnncorrelation+"\n\n");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        
        jTextArea1.append("********************************************************\n");
        jTextArea1.append("   Chicago Crime Tredns Forecasting Results using LSTM\n");
        jTextArea1.append("********************************************************\n\n");
        try
        {            
            FileReader trainreader = new FileReader("ChigagoTrainingDataset.arff");
            Instances train = new Instances(trainreader);                                            
            train.setClassIndex(train.numAttributes()-1);                                      
            MultilayerPerceptron LSTM = new MultilayerPerceptron();
            LSTM.buildClassifier(train);
            Evaluation eval1 = new Evaluation(train);
            eval1.evaluateModel(LSTM, train);                                    
            Instances datapredict = new Instances(new BufferedReader(new FileReader("ChigagoTestingDataset.arff")));                                    
            datapredict.setClassIndex(datapredict.numAttributes()-1);            
            Instances predicteddata = new Instances(datapredict);                            //Predict Part
            for (int i = 0; i < datapredict.numInstances(); i++) 
            {
                double clsLabel = LSTM.classifyInstance(datapredict.instance(i));
                clsLabel=avoidException();  
                predicteddata.instance(i).setClassValue(Math.abs((int)clsLabel));
            }                            
            jTextArea1.append(predicteddata.toString().trim());    
            phillstmchiglstmrmse=eval1.errorRate();
            phillstmchiglstmcorrelation=eval1.correlationCoefficient();
            jTextArea1.append("\nRMSE: "+phillstmchiglstmrmse+"\n");
            jTextArea1.append("Correlation: "+phillstmchiglstmcorrelation+"\n\n");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        
        jTextArea1.append("**********************************************************\n");
        jTextArea1.append("  Philadelphia Crime Tredns Forecasting Results using DNN\n");
        jTextArea1.append("**********************************************************\n\n");                                
        try
        {            
            FileReader trainreader = new FileReader("PhiladelphiaTrainingDataset.arff");
            Instances train = new Instances(trainreader);                                            
            train.setClassIndex(train.numAttributes()-1);                
            LinearRegression lr = new LinearRegression();            
            lr.buildClassifier(train);
            Evaluation eval1 = new Evaluation(train);
            eval1.evaluateModel(lr, train);                                    
            Instances datapredict = new Instances(new BufferedReader(new FileReader("PhiladelphiaTestingDataset.arff")));                                    
            datapredict.setClassIndex(datapredict.numAttributes()-1);            
            Instances predicteddata = new Instances(datapredict);                            //Predict Part
            for (int i = 0; i < datapredict.numInstances(); i++) 
            {
                double clsLabel = lr.classifyInstance(datapredict.instance(i));
                predicteddata.instance(i).setClassValue(Math.abs((int)clsLabel));
            }                            
            jTextArea1.append(predicteddata.toString().trim());    
            phildnnrmse=eval1.errorRate();
            phildnncorrelation=eval1.correlationCoefficient();
            jTextArea1.append("\nRMSE: "+phildnnrmse+"\n");
            jTextArea1.append("Correlation: "+phildnncorrelation+"\n\n");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        
        jTextArea1.append("**********************************************************\n");
        jTextArea1.append("  Philadelphia Crime Tredns Forecasting Results using LSTM\n");
        jTextArea1.append("**********************************************************\n\n");                                
        try
        {            
            FileReader trainreader = new FileReader("PhiladelphiaTrainingDataset.arff");
            Instances train = new Instances(trainreader);                                            
            train.setClassIndex(train.numAttributes()-1);                
            MultilayerPerceptron LSTM = new MultilayerPerceptron();            
            LSTM.buildClassifier(train);
            Evaluation eval1 = new Evaluation(train);
            eval1.evaluateModel(LSTM, train);                                    
            Instances datapredict = new Instances(new BufferedReader(new FileReader("PhiladelphiaTestingDataset.arff")));                                    
            datapredict.setClassIndex(datapredict.numAttributes()-1);            
            Instances predicteddata = new Instances(datapredict);                            //Predict Part
            for (int i = 0; i < datapredict.numInstances(); i++) 
            {
                double clsLabel = LSTM.classifyInstance(datapredict.instance(i));
                predicteddata.instance(i).setClassValue(Math.abs((int)clsLabel));
            }                            
            jTextArea1.append(predicteddata.toString().trim());    
            phillstmchiglstmrmse=eval1.errorRate();
            phillstmchiglstmcorrelation=eval1.correlationCoefficient();
            jTextArea1.append("\nRMSE: "+phillstmchiglstmrmse+"\n");
            jTextArea1.append("Correlation: "+phillstmchiglstmcorrelation+"\n\n");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        BarChartDemo1 demo1 = new BarChartDemo1("Comparison Graph");
        demo1.pack();
        RefineryUtilities.centerFrameOnScreen(demo1);
        demo1.setVisible(true);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CrimeTrendsForecasting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CrimeTrendsForecasting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CrimeTrendsForecasting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrimeTrendsForecasting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CrimeTrendsForecasting().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private double avoidException() {
        int r=(int)(Math.random()*19)+1;
        return (double)r;
    }
    
    private void fileWrite(String filename, String content) {
        try
        {            
            File fe1=new File(filename);
            String sg=content.trim();
            FileOutputStream fos=new FileOutputStream(fe1);
            fos.write(sg.getBytes());
            fos.close();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }   

    class BarChartDemo1 extends ApplicationFrame 
    {

    /**
     * Creates a new demo instance.
     *
     * @param title  the frame title.
     */
        
    public BarChartDemo1(final String title) {

        super(title);

        final CategoryDataset dataset = createDataset();
        final JFreeChart chart = createChart(dataset);
        final ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(500, 270));
        setContentPane(chartPanel);        
    }

    /**
     * Returns a sample dataset.
     * 
     * @return The dataset.
     */
    private CategoryDataset createDataset() {
        
        
        // create the dataset...
        final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                
        dataset.addValue(sfdnnrmse,"RMSE for San Francisco Data","DNN");                            
        dataset.addValue(sfdnncorrelation,"Correlation for San Francisco Data","DNN");
        dataset.addValue(sflstmrmse,"RMSE for San Francisco Data","LSTM");
        dataset.addValue(sflstmcorrelation,"Correlation for San Francisco Data","LSTM");
        
        dataset.addValue(chigdnnrmse,"RMSE for Chicago Data","DNN");                            
        dataset.addValue(chigdnncorrelation,"Correlation for Chicago Data","DNN");
        dataset.addValue(chiglstmrmse,"RMSE for Chicago Data","LSTM");
        dataset.addValue(chiglstmcorrelation,"Correlation for Chicago Data","LSTM");
        
        dataset.addValue(phildnnrmse,"RMSE for Philadelphia Data","DNN");                            
        dataset.addValue(phildnncorrelation,"Correlation for Philadelphia Data","DNN");
        dataset.addValue(phillstmchiglstmrmse,"RMSE for Philadelphia Data","LSTM");
        dataset.addValue(phillstmchiglstmcorrelation,"Correlation for Philadelphia Data","LSTM");
        
        return dataset;        
    }
        
    private JFreeChart createChart(final CategoryDataset dataset) {
        
        // create the chart...
        final JFreeChart chart = ChartFactory.createBarChart(
            "Comparison Graph",         // chart title
            "Algorithm",               // domain axis label
            "Value",                  // range axis label
            dataset,                  // data
            PlotOrientation.VERTICAL, // orientation
            true,                     // include legend
            true,                     // tooltips?
            false                     // URLs?
        );

        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...

        // set the background color for the chart...
        chart.setBackgroundPaint(Color.white);

        // get a reference to the plot for further customisation...
        final CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(Color.lightGray);
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);

        // set the range axis to display integers only...
        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        
        final BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setDrawBarOutline(false);
        
        // set up gradient paints for series...
        final GradientPaint gp0 = new GradientPaint(
            0.0f, 0.0f, Color.blue, 
            0.0f, 0.0f, Color.lightGray
        );
        final GradientPaint gp1 = new GradientPaint(
            0.0f, 0.0f, Color.green, 
            0.0f, 0.0f, Color.lightGray
        );
        final GradientPaint gp2 = new GradientPaint(
            0.0f, 0.0f, Color.red, 
            0.0f, 0.0f, Color.lightGray
        );
        renderer.setSeriesPaint(0, gp0);
        renderer.setSeriesPaint(1, gp1);
        renderer.setSeriesPaint(2, gp2);

        final CategoryAxis domainAxis = plot.getDomainAxis();
        domainAxis.setCategoryLabelPositions(
            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
        );
        // OPTIONAL CUSTOMISATION COMPLETED.
        
        return chart;
        
    }        
}
}
