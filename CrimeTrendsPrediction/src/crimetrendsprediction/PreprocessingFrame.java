/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package crimetrendsprediction;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.util.ArrayList;
import javax.swing.JPanel;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;

/**
 *
 * @author SEABIRDS-PC
 */
public class PreprocessingFrame extends javax.swing.JFrame {

    /**
     * Creates new form PreprocessingFrame
     */
    
    public static String newSFdataset="",newchigdataset="",newphildataset="";
    
    public PreprocessingFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 51, 0));

        jLabel1.setFont(new java.awt.Font("Algerian", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Data Preprocessing");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(285, 285, 285)
                .addComponent(jLabel1)
                .addContainerGap(288, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jButton1.setText("Data Preprocessing");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Crime Trends Forecasting");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Narrative visualization");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        CrimeTrendsForecasting bvs=new CrimeTrendsForecasting();
        bvs.setTitle("Crime Trends Forecasting");
        bvs.setVisible(true);
        bvs.setResizable(false);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        String SFdataset=MainFrame.SFdataset;
        String chigdataset=MainFrame.chigdataset;
        String phildataset=MainFrame.phildataset;
        
        String header="Date & Time, Location, Crime";
        
        int sf[]={0,23,24,14};
        int chig[]={2,19,20,5};
        int phil[]={3,13,14,10};
                
        try
        {
            jTextArea1.append("=====================================================================================\n");
            jTextArea1.append("                                 San Francisco crime data\n");
            jTextArea1.append("=====================================================================================\n");             
            String sp[]=SFdataset.split("\n");
            String ro="";
            for(int i=1;i<sp.length;i++)
            {
                String spl[]=sp[i].split(","); 
                if((!(spl[sf[1]].trim().equals("")))&&(!(spl[sf[3]].trim().equals(""))))
                {
                    ro=ro+spl[sf[0]]+",("+spl[sf[1]]+" & "+spl[sf[2]]+"),"+spl[sf[3]]+"\n";                
                }
            }
            newSFdataset=header.trim()+"\n"+ro.substring(0,ro.lastIndexOf('\n'));
            jTextArea1.append(newSFdataset.trim()+"\n\n");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        try
        {
            jTextArea1.append("=====================================================================================\n");
            jTextArea1.append("                                  Chicago crime data\n");
            jTextArea1.append("=====================================================================================\n");            
            String sp[]=chigdataset.split("\n");
            String ro="";
            for(int i=1;i<sp.length;i++)
            {
                String spl[]=sp[i].split(",");                
                if(!(spl[chig[1]].equals("")))
                {
                    ro=ro+spl[chig[0]]+",("+spl[chig[1]]+" & "+spl[chig[2]]+"),"+spl[chig[3]]+"\n";                
                }
            }
            newchigdataset=header.trim()+"\n"+ro.substring(0,ro.lastIndexOf('\n'));
            jTextArea1.append(newchigdataset.trim()+"\n\n");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        try
        {
            jTextArea1.append("=====================================================================================\n");
            jTextArea1.append("                                  Philadelphia crime data\n");
            jTextArea1.append("=====================================================================================\n");
            String sp[]=phildataset.split("\n");
            String ro="";
            for(int i=1;i<sp.length;i++)
            {
                String spl[]=sp[i].split(",");
                if(!(spl[phil[1]].trim().equals("")))
                {
                    ro=ro+spl[phil[0]]+",("+spl[phil[1]]+" & "+spl[phil[2]]+"),"+spl[phil[3]]+"\n";
                }
            }
            newphildataset=header.trim()+"\n"+ro.substring(0,ro.lastIndexOf('\n'));
            jTextArea1.append(newphildataset.trim()+"\n\n");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        BarChartDemo1 demo1 = new BarChartDemo1("Location Vs Crime Count");
        demo1.pack();
        RefineryUtilities.centerFrameOnScreen(demo1);
        demo1.setVisible(true);
        
        LineChart1 demo = new LineChart1("Monthly Statistics of crime on year 2020");
        demo.pack();
        RefineryUtilities.centerFrameOnScreen(demo);
        demo.setVisible(true);
        
        LineChart2 demo2 = new LineChart2("Hourly trend of crime on year 2020");
        demo2.pack();
        RefineryUtilities.centerFrameOnScreen(demo2);
        demo2.setVisible(true);
        
        PieChart_AWT demo3 = new PieChart_AWT("Crime cases for San-Francisco");  
        demo3.setSize(560, 367);    
        RefineryUtilities.centerFrameOnScreen(demo3);    
        demo3.setVisible( true );
        
        PieChart_AWT1 demo4 = new PieChart_AWT1("Crime cases for Chicago");  
        demo4.setSize(560, 367);    
        RefineryUtilities.centerFrameOnScreen(demo4);    
        demo4.setVisible( true );
        
        PieChart_AWT2 demo5 = new PieChart_AWT2("Crime cases for Philadelphia");  
        demo5.setSize(560, 367);    
        RefineryUtilities.centerFrameOnScreen(demo5);    
        demo5.setVisible( true );
        
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PreprocessingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PreprocessingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PreprocessingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PreprocessingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PreprocessingFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    public static class PieChart_AWT extends ApplicationFrame 
    {   
        public PieChart_AWT( String title ) {
           super( title ); 
           setContentPane(createDemoPanel( ));
        }

        private static PieDataset createDataset( ) {
            DefaultPieDataset dataset = new DefaultPieDataset();
           
            try
            {
                String sp[]=newSFdataset.trim().split("\n");
                ArrayList norep=new ArrayList();
                for(int i=1;i<sp.length;i++)
                {
                    String sk[]=sp[i].trim().split(",");
                    //System.out.println("sp[i]: "+sp[i]);
                    //System.out.println("sk.length: "+sk.length);
                    if(!(norep.contains(sk[2].trim())))
                    {
                        norep.add(sk[2].trim());
                    }
                }
                //System.out.println("SF");
                for(int j=0;j<norep.size();j++)
                {
                    String crime=norep.get(j).toString().trim();
                    //System.out.println(crime);
                    int count=0;
                    for(int i=1;i<sp.length;i++)
                    {
                        String sk[]=sp[i].trim().split(",");
                        if(crime.trim().equals(sk[2].trim()))
                        {
                            count++;
                        }
                    }
                    dataset.setValue( crime , new Double( count ) ); 
                }
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }                         
            
           return dataset;         
        }

        private static JFreeChart createChart( PieDataset dataset ) {
           JFreeChart chart = ChartFactory.createPieChart(      
              "Crime cases for San-Francisco",   // chart title 
              dataset,          // data    
              true,             // include legend   
              true, 
              false);
           
           PiePlot plot = (PiePlot) chart.getPlot();
           plot.setLabelGenerator(new StandardPieSectionLabelGenerator("{0} {2}"));
           
           return chart;
        }

        public static JPanel createDemoPanel( ) {
           JFreeChart chart = createChart(createDataset( ) );  
           return new ChartPanel( chart ); 
        }
       
     }

    public static class PieChart_AWT1 extends ApplicationFrame 
    {   
        public PieChart_AWT1( String title ) {
           super( title ); 
           setContentPane(createDemoPanel( ));
        }

        private static PieDataset createDataset( ) {
            DefaultPieDataset dataset = new DefaultPieDataset();
           
            try
            {
                String sp[]=newchigdataset.trim().split("\n");
                ArrayList norep=new ArrayList();
                for(int i=1;i<sp.length;i++)
                {
                    String sk[]=sp[i].trim().split(",");
                    if(!(norep.contains(sk[2].trim())))
                    {
                        norep.add(sk[2].trim());
                    }
                }
                for(int j=0;j<norep.size();j++)
                {
                    String crime=norep.get(j).toString().trim();
                    //System.out.println(crime);
                    int count=0;
                    for(int i=1;i<sp.length;i++)
                    {
                        String sk[]=sp[i].trim().split(",");
                        if(crime.trim().equals(sk[2].trim()))
                        {
                            count++;
                        }
                    }
                    dataset.setValue( crime , new Double( count ) ); 
                }
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }                         
            
           return dataset;         
        }

        private static JFreeChart createChart( PieDataset dataset ) {
           JFreeChart chart = ChartFactory.createPieChart(      
              "Crime cases for Chicago",   // chart title 
              dataset,          // data    
              true,             // include legend   
              true, 
              false);
           
           PiePlot plot = (PiePlot) chart.getPlot();
           plot.setLabelGenerator(new StandardPieSectionLabelGenerator("{0} {2}"));
           
           return chart;
        }

        public static JPanel createDemoPanel( ) {
           JFreeChart chart = createChart(createDataset( ) );  
           return new ChartPanel( chart ); 
        }
       
     }

    public static class PieChart_AWT2 extends ApplicationFrame 
    {   
        public PieChart_AWT2( String title ) {
           super( title ); 
           setContentPane(createDemoPanel( ));
        }

        private static PieDataset createDataset( ) {
            DefaultPieDataset dataset = new DefaultPieDataset();
           
            try
            {
                String sp[]=newphildataset.trim().split("\n");
                ArrayList norep=new ArrayList();
                for(int i=1;i<sp.length;i++)
                {
                    String sk[]=sp[i].trim().split(",");
                    if(!(norep.contains(sk[2].trim())))
                    {
                        norep.add(sk[2].trim());
                    }
                }
                for(int j=0;j<norep.size();j++)
                {
                    String crime=norep.get(j).toString().trim();
                    //System.out.println(crime);
                    int count=0;
                    for(int i=1;i<sp.length;i++)
                    {
                        String sk[]=sp[i].trim().split(",");
                        if(crime.trim().equals(sk[2].trim()))
                        {
                            count++;
                        }
                    }
                    dataset.setValue( crime , new Double( count ) ); 
                }
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }                         
            
           return dataset;         
        }

        private static JFreeChart createChart( PieDataset dataset ) {
           JFreeChart chart = ChartFactory.createPieChart(      
              "Crime cases for Philadelphia",   // chart title 
              dataset,          // data    
              true,             // include legend   
              true, 
              false);
           
           PiePlot plot = (PiePlot) chart.getPlot();
           plot.setLabelGenerator(new StandardPieSectionLabelGenerator("{0} {2}"));
           
           return chart;
        }

        public static JPanel createDemoPanel( ) {
           JFreeChart chart = createChart(createDataset( ) );  
           return new ChartPanel( chart ); 
        }
       
     }

    public class LineChart2 extends ApplicationFrame {

    /**
     * Creates a new demo.
     *
     * @param title  the frame title.
     */
    public LineChart2(final String title) {
        super(title);
        final CategoryDataset dataset = createDataset();
        final JFreeChart chart = createChart(dataset);
        final ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(500, 270));
        setContentPane(chartPanel);
    }

    /**
     * Creates a sample dataset.
     * 
     * @return The dataset.
     */
    private CategoryDataset createDataset() {                     

        // create the dataset...
        final DefaultCategoryDataset dataset = new DefaultCategoryDataset();       
                
        ArrayList norep=new ArrayList();                        		
        norep.add("00");
        norep.add("01");
        norep.add("02");
        norep.add("03");
        norep.add("04");
        norep.add("05");
        norep.add("06");
        norep.add("07");
        norep.add("08");
        norep.add("09");
        norep.add("10");
        norep.add("11");
        norep.add("12");
        norep.add("13");
        norep.add("14");
        norep.add("15");
        norep.add("16");
        norep.add("17");
        norep.add("18");
        norep.add("19");
        norep.add("20");
        norep.add("21");
        norep.add("22");
        norep.add("23");        
        try
        {
            String sp[]=newSFdataset.trim().split("\n");                        
            for(int j=0;j<norep.size();j++)
            {
                String hour=norep.get(j).toString().trim();
                int count=0;
                for(int i=1;i<sp.length;i++)
                {
                    String sk[]=sp[i].trim().split(",");                    			
		    String hour1=sk[0].trim().split(" ")[1].trim().split(":")[0].trim();
                    if(hour.trim().equals(hour1.trim()))
                    {
                        count++;
                    }
                }
                dataset.addValue(count,"San Francisco",hour);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        try
        {
            String sp[]=newchigdataset.trim().split("\n");                        
            for(int j=0;j<norep.size();j++)
            {
                String hour=norep.get(j).toString().trim();
                int count=0;
                for(int i=1;i<sp.length;i++)
                {
                    String sk[]=sp[i].trim().split(",");                    			
		    String hour1=sk[0].trim().split(" ")[1].trim().split(":")[0].trim();
                    if(hour.trim().equals(hour1.trim()))
                    {
                        count++;
                    }
                }
                dataset.addValue(count,"Chicago",hour);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        try
        {
            String sp[]=newphildataset.trim().split("\n");                        
            for(int j=0;j<norep.size();j++)
            {
                String hour=norep.get(j).toString().trim();
                int count=0;
                for(int i=1;i<sp.length;i++)
                {
                    String sk[]=sp[i].trim().split(",");                    			
		    String hour1=sk[0].trim().split(" ")[1].trim().split(":")[0].trim();
                    if(hour.trim().equals(hour1.trim()))
                    {
                        count++;
                    }
                }
                dataset.addValue(count,"Philadelphia",hour);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }

        return dataset;
                
    }
    
    /**
     * Creates a sample chart.
     * 
     * @param dataset  a dataset.
     * 
     * @return The chart.
     */
    private JFreeChart createChart(final CategoryDataset dataset) {
        
        // create the chart...
        final JFreeChart chart = ChartFactory.createLineChart(
            "Hourly Trend of crime on year 2020",       // chart title
            "Hour",                    // domain axis label
            "Crime Count",                   // range axis label
            dataset,                   // data
            PlotOrientation.VERTICAL,  // orientation
            true,                      // include legend
            true,                      // tooltips
            false                      // urls
        );

        chart.setBackgroundPaint(Color.white);

       final CategoryPlot plot = (CategoryPlot) chart.getPlot();	 
        plot.setBackgroundPaint(Color.lightGray);
        plot.setRangeGridlinePaint(Color.white);
        
        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        rangeAxis.setAutoRangeIncludesZero(true);
		
	final LineAndShapeRenderer renderer = new LineAndShapeRenderer();
        renderer.setSeriesLinesVisible(0, true);
        renderer.setSeriesShapesVisible(1, true);
	renderer.setSeriesShapesVisible(2, true);
        plot.setRenderer(renderer);		        
        
        return chart;
    }        
}

    public class LineChart1 extends ApplicationFrame {

    /**
     * Creates a new demo.
     *
     * @param title  the frame title.
     */
    public LineChart1(final String title) {
        super(title);
        final CategoryDataset dataset = createDataset();
        final JFreeChart chart = createChart(dataset);
        final ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(500, 270));
        setContentPane(chartPanel);
    }

    /**
     * Creates a sample dataset.
     * 
     * @return The dataset.
     */
    private CategoryDataset createDataset() {                     

        // create the dataset...
        final DefaultCategoryDataset dataset = new DefaultCategoryDataset();       
                
        ArrayList norep=new ArrayList();                        		
        norep.add("01");
        norep.add("02");
        norep.add("03");
        norep.add("04");
        norep.add("05");
        norep.add("06");
        norep.add("07");
        norep.add("08");
        norep.add("09");
        norep.add("10");
        norep.add("11");
        norep.add("12");
        try
        {
            String sp[]=newSFdataset.trim().split("\n");                        
            for(int j=0;j<norep.size();j++)
            {
                String month=norep.get(j).toString().trim();
                int count=0;
                for(int i=1;i<sp.length;i++)
                {
                    String sk[]=sp[i].trim().split(",");                    			
		    String month1=sk[0].trim().split(" ")[0].trim().split("-")[1].trim();
                    if(month.trim().equals(month1.trim()))
                    {
                        count++;
                    }
                }
                dataset.addValue(count,"San Francisco",month);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        try
        {
            String sp[]=newchigdataset.trim().split("\n");                        
            for(int j=0;j<norep.size();j++)
            {
                String month=norep.get(j).toString().trim();
                int count=0;
                for(int i=1;i<sp.length;i++)
                {
                    String sk[]=sp[i].trim().split(",");                    			
		    String month1=sk[0].trim().split(" ")[0].trim().split("\\/")[0].trim();
                    if(month.trim().equals(month1.trim()))
                    {
                        count++;
                    }
                }
                dataset.addValue(count,"Chicago",month);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        try
        {
            String sp[]=newphildataset.trim().split("\n");                        
            for(int j=0;j<norep.size();j++)
            {
                String month=norep.get(j).toString().trim();
                int count=0;
                for(int i=1;i<sp.length;i++)
                {
                    String sk[]=sp[i].trim().split(",");                    			
		    String month1=sk[0].trim().split(" ")[0].trim().split("-")[1].trim();
                    if(month.trim().equals(month1.trim()))
                    {
                        count++;
                    }
                }
                dataset.addValue(count,"Philadelphia",month);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }

        return dataset;
                
    }
    
    /**
     * Creates a sample chart.
     * 
     * @param dataset  a dataset.
     * 
     * @return The chart.
     */
    private JFreeChart createChart(final CategoryDataset dataset) {
        
        // create the chart...
        final JFreeChart chart = ChartFactory.createLineChart(
            "Monthly Statistics of crime on year 2020",       // chart title
            "Month",                    // domain axis label
            "Crime Count",                   // range axis label
            dataset,                   // data
            PlotOrientation.VERTICAL,  // orientation
            true,                      // include legend
            true,                      // tooltips
            false                      // urls
        );

        chart.setBackgroundPaint(Color.white);

       final CategoryPlot plot = (CategoryPlot) chart.getPlot();	 
        plot.setBackgroundPaint(Color.lightGray);
        plot.setRangeGridlinePaint(Color.white);
        
        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        rangeAxis.setAutoRangeIncludesZero(true);
		
	final LineAndShapeRenderer renderer = new LineAndShapeRenderer();
        renderer.setSeriesLinesVisible(0, true);
        renderer.setSeriesShapesVisible(1, true);
	renderer.setSeriesShapesVisible(2, true);
        plot.setRenderer(renderer);		        
        
        return chart;
    }        
}

    class BarChartDemo1 extends ApplicationFrame 
    {

    /**
     * Creates a new demo instance.
     *
     * @param title  the frame title.
     */
        
    public BarChartDemo1(final String title) {

        super(title);

        final CategoryDataset dataset = createDataset();
        final JFreeChart chart = createChart(dataset);
        final ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(500, 270));
        setContentPane(chartPanel);        
    }

    /**
     * Returns a sample dataset.
     * 
     * @return The dataset.
     */
    private CategoryDataset createDataset() {
        
        
        // create the dataset...
        final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        try
        {
            String sp[]=newSFdataset.trim().split("\n");
            ArrayList norep=new ArrayList();
            for(int i=1;i<sp.length;i++)
            {
                String sk[]=sp[i].trim().split(",");
                if(!(norep.contains(sk[1].trim())))
                {
                    norep.add(sk[1].trim());
                }
            }
            for(int j=0;j<10;j++)
            {
                String location=norep.get(j).toString().trim();
                int count=0;
                for(int i=1;i<sp.length;i++)
                {
                    String sk[]=sp[i].trim().split(",");
                    if(location.trim().equals(sk[1].trim()))
                    {
                        count++;
                    }
                }
                dataset.addValue(count,"San Francisco",location);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        try
        {
            String sp[]=newchigdataset.trim().split("\n");
            ArrayList norep=new ArrayList();
            for(int i=1;i<sp.length;i++)
            {
                String sk[]=sp[i].trim().split(",");
                if(!(norep.contains(sk[1].trim())))
                {
                    norep.add(sk[1].trim());
                }
            }
            for(int j=0;j<10;j++)
            {
                String location=norep.get(j).toString().trim();
                int count=0;
                for(int i=1;i<sp.length;i++)
                {
                    String sk[]=sp[i].trim().split(",");
                    if(location.trim().equals(sk[1].trim()))
                    {
                        count++;
                    }
                }
                dataset.addValue(count,"Chicago",location);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        try
        {
            String sp[]=newphildataset.trim().split("\n");
            ArrayList norep=new ArrayList();
            for(int i=1;i<sp.length;i++)
            {
                String sk[]=sp[i].trim().split(",");
                if(!(norep.contains(sk[1].trim())))
                {
                    norep.add(sk[1].trim());
                }
            }
            for(int j=0;j<10;j++)
            {
                String location=norep.get(j).toString().trim();
                int count=0;
                for(int i=1;i<sp.length;i++)
                {
                    String sk[]=sp[i].trim().split(",");
                    if(location.trim().equals(sk[1].trim()))
                    {
                        count++;
                    }
                }
                dataset.addValue(count,"Philadelphia",location);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        return dataset;        
    }
        
    private JFreeChart createChart(final CategoryDataset dataset) {
        
        // create the chart...
        final JFreeChart chart = ChartFactory.createBarChart(
            "Top 30 Location Vs Crime Count",         // chart title
            "Location",               // domain axis label
            "Crime Count",                  // range axis label
            dataset,                  // data
            PlotOrientation.VERTICAL, // orientation
            true,                     // include legend
            true,                     // tooltips?
            false                     // URLs?
        );

        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...

        // set the background color for the chart...
        chart.setBackgroundPaint(Color.white);

        // get a reference to the plot for further customisation...
        final CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(Color.lightGray);
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);

        // set the range axis to display integers only...
        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        
        final BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setDrawBarOutline(false);
        
        // set up gradient paints for series...
        final GradientPaint gp0 = new GradientPaint(
            0.0f, 0.0f, Color.blue, 
            0.0f, 0.0f, Color.lightGray
        );
        final GradientPaint gp1 = new GradientPaint(
            0.0f, 0.0f, Color.green, 
            0.0f, 0.0f, Color.lightGray
        );
        final GradientPaint gp2 = new GradientPaint(
            0.0f, 0.0f, Color.red, 
            0.0f, 0.0f, Color.lightGray
        );
        renderer.setSeriesPaint(0, gp0);
        renderer.setSeriesPaint(1, gp1);
        renderer.setSeriesPaint(2, gp2);

        final CategoryAxis domainAxis = plot.getDomainAxis();
        domainAxis.setCategoryLabelPositions(
            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
        );
        // OPTIONAL CUSTOMISATION COMPLETED.
        
        return chart;
        
    }        
}
    
}
